generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenType {
  ACCESS
  REFRESH
}

enum Role {
  ADMIN
  USER
  SUPERADMIN
}

enum AuthProvider {
  GOOGLE
  LOCAL
}

enum TaskStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum OpportunityStage {
  QUALIFICATION
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

model User {
  id            Int            @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String         @unique
  avatar        String?
  password      String?
  googleId      String?        @unique
  authProviders AuthProvider[] @default([LOCAL])
  isActive      Boolean        @default(false)
  roles         Role[]         @default([USER])
  tokens        Token[]
  leads         Lead[]
  tasks         Task[]
  activityLogs  ActivityLog[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Token {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      TokenType
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId], map: "token_user_id_idx")
}

model Lead {
  id            Int           @id @default(autoincrement())
  companyName   String
  industry      String?
  status        String?       @default("Potential")
  phone         String?
  email         String?
  source        String?
  website       String?
  description   String?
  contacts      Contact[]
  notes         Note[]
  opportunities Opportunity[]
  userId        Int
  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks         Task[]
  activityLogs  ActivityLog[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Contact {
  id             Int           @id @default(autoincrement())
  contactName    String
  title          String?
  email          String?
  phone          String?
  position       String?
  contactDetails String?
  leadId         Int
  Lead           Lead          @relation(fields: [leadId], references: [id], onDelete: Cascade)
  activityLogs   ActivityLog[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Opportunity {
  id        Int              @id @default(autoincrement())
  title     String?
  amount    Float?
  stage     OpportunityStage @default(QUALIFICATION)
  closeDate DateTime?
  leadId    Int
  Lead      Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String?
  leadId    Int
  Lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String?
  description String?
  dueDate     DateTime?
  status      TaskStatus @default(PENDING)
  leadId      Int
  Lead        Lead       @relation(fields: [leadId], references: [id], onDelete: Cascade)
  userId      Int
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  action    String
  leadId    Int?
  contactId Int?
  Lead      Lead?    @relation(fields: [leadId], references: [id], onDelete: Cascade)
  Contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// import { User, Token } from "./models/user.prisma"
// import { Lead, Opportunity, Contact, Note, Task, ActivityLog } from "./models/crm.prisma"

// npx prisma generate --schema=./src/prisma/schema.prisma
// npx prisma migrate dev --schema=./src/prisma/schema.prisma --name init
