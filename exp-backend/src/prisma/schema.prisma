generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenType {
  ACCESS
  REFRESH
}

enum AuthProvider {
  GOOGLE
  LOCAL
}

enum TaskStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum OpportunityStage {
  QUALIFICATION
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum AccessRole {
  ADMIN
  SUPERADMIN
  RESTRICTEDUSER
  USER
}

model User {
  id                    Int                @id @default(autoincrement())
  firstName             String
  lastName              String
  email                 String             @unique
  avatar                String?
  address               String?
  phoneNumber           String?
  password              String?
  googleId              String?            @unique
  authProviders         AuthProvider[]     @default([LOCAL])
  isActive              Boolean            @default(false)
  organizationId        Int? // Optional organization association
  organization          Organization?      @relation(fields: [organizationId], references: [id]) // Relation to Organization
  ownedOrganizations    Organization[]     @relation("OrganizationOwner") // Opposite relation for owner in Organization
  memberOfOrganizations Organization[]     @relation("OrganizationUsers") // Opposite relation for users in Organization
  roles                 UserRole[] // Many-to-many relation with Role
  organizationRoles     OrganizationRole[] // New relation for roles specific to organizations
  defaultRoleId         Int? // Reference to default role
  tokens                Token[]
  leads                 Lead[]
  tasks                 Task[]
  activityLogs          ActivityLog[]
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  leadAccess            LeadAccess[] // Relation for LeadAccess
}

model Role {
  id          Int              @id @default(autoincrement())
  roleName    String           @unique
  description String?
  permissions RolePermission[] // Connects roles to permissions
  users       UserRole[] // Many-to-many relation with users
}

model UserRole {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model Permission {
  id             Int              @id @default(autoincrement())
  permissionName String           @unique
  roles          RolePermission[] // Connects permissions to roles
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model Organization {
  id               Int                @id @default(autoincrement())
  name             String
  ownerId          Int
  owner            User               @relation("OrganizationOwner", fields: [ownerId], references: [id]) // Organization owner relation
  users            User[]             @relation("OrganizationUsers") // Users in the organization
  leads            Lead[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  User             User[]
  OrganizationRole OrganizationRole[]
}

model OrganizationRole {
  id             Int            @id @default(autoincrement())
  userId         Int
  organizationId Int
  role           AccessRole // Role of the user within the organization
  user           User           @relation(fields: [userId], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId]) // Ensure a user can have only one role per organization
}

model Lead {
  id             Int           @id @default(autoincrement())
  companyName    String
  industry       String?
  status         String?       @default("Potential")
  phone          String?
  email          String?
  source         String?
  website        String?
  description    String?
  userId         Int
  User           User          @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User
  organizationId Int
  organization   Organization  @relation(fields: [organizationId], references: [id]) // Relation to Organization
  leadAccess     LeadAccess[]
  contacts       Contact[] // Opposite relation for Contact
  opportunities  Opportunity[] // Opposite relation for Opportunity
  notes          Note[] // Opposite relation for Note
  tasks          Task[]
  activityLogs   ActivityLog[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model LeadAccess {
  id        Int            @id @default(autoincrement())
  userId    Int
  User      User           @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User
  leadId    Int
  Lead      Lead           @relation(fields: [leadId], references: [id], onDelete: Cascade) // Relation to Lead
  role      AccessRole
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([userId, leadId])
}

model Token {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      TokenType
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId], map: "token_user_id_idx")
}

model Contact {
  id             Int           @id @default(autoincrement())
  contactName    String
  title          String?
  email          String?
  phone          String?
  position       String?
  contactDetails String?
  leadId         Int
  Lead           Lead          @relation(fields: [leadId], references: [id], onDelete: Cascade) // Relation to Lead
  activityLogs   ActivityLog[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Opportunity {
  id        Int              @id @default(autoincrement())
  title     String?
  amount    Float?
  stage     OpportunityStage @default(QUALIFICATION)
  closeDate DateTime?
  leadId    Int
  Lead      Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade) // Relation to Lead
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String?
  leadId    Int
  Lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade) // Relation to Lead
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String?
  description String?
  dueDate     DateTime?
  status      TaskStatus @default(PENDING)
  leadId      Int
  Lead        Lead       @relation(fields: [leadId], references: [id], onDelete: Cascade) // Relation to Lead
  userId      Int
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  action    String
  leadId    Int?
  contactId Int?
  Lead      Lead?    @relation(fields: [leadId], references: [id], onDelete: Cascade) // Optional relation to Lead
  Contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade) // Optional relation to Contact
  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
